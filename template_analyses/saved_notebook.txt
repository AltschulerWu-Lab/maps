{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 219,
   "id": "f2aa07b7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{\n",
      "    \"name\": \"maps_dmso\",\n",
      "    \"screen\": \"20250216_AWALS37_Full_screen_n96\",\n",
      "    \"root\": \"/awlab/projects/2024_ALS/Experiments\",\n",
      "    \"data_file\": \"Objects_Population - Nuclei Selected.txt\",\n",
      "    \"eval_dir\": \"Evaluation1\",\n",
      "    \"preprocess\": {\n",
      "        \"drop_na_features\": {\n",
      "            \"na_prop\": 0.1\n",
      "        },\n",
      "        \"drop_sample_by_feature\": {\n",
      "            \"drop_key\": [\n",
      "                {\n",
      "                    \"CellLines\": [\n",
      "                        \"C9014\",\n",
      "                        \"NS048\"\n",
      "                    ]\n",
      "                }\n",
      "            ]\n",
      "        },\n",
      "        \"select_sample_by_feature\": {\n",
      "            \"select_key\": [\n",
      "                {\n",
      "                    \"Drugs\": [\n",
      "                        \"DMSO\"\n",
      "                    ],\n",
      "                    \"Mutations\": [\n",
      "                        \"FUS\",\n",
      "                        \"WT\"\n",
      "                    ]\n",
      "                }\n",
      "            ]\n",
      "        },\n",
      "        \"drop_cells_by_feature_qt\": {\n",
      "            \"feature_filters\": {\n",
      "                \"Nucleus_Region_Area_[\\u00b5m\\u00b2]\": 0.05,\n",
      "                \"Cell_Region_Area_[\\u00b5m\\u00b2]\": 0.05\n",
      "            }\n",
      "        },\n",
      "        \"select_feature_types\": {\n",
      "            \"feature_str\": \"^.*Intensity.*$|^.*Spot.*$\"\n",
      "        },\n",
      "        \"drop_feature_types\": {\n",
      "            \"feature_str\": \"^.*Sum.*$|^.*HOECHST.*$|^.*546.*$\"\n",
      "        },\n",
      "        \"drop_constant_features\": {},\n",
      "        \"subsample_rows_by_id\": {\n",
      "            \"n\": 100,\n",
      "            \"seed\": 47\n",
      "        },\n",
      "        \"standardize_features\": {}\n",
      "    },\n",
      "    \"analysis\": {\n",
      "        \"MAP\": {\n",
      "            \"model\": {\n",
      "                \"MultiAntibody\": {}\n",
      "            },\n",
      "            \"seed\": 47,\n",
      "            \"response\": \"Mutations\",\n",
      "            \"fitter\": \"leave_one_out\"\n",
      "        }\n",
      "    }\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import torch\n",
    "\n",
    "from maps.screens import ImageScreenMultiAntibody\n",
    "#from maps.multiantibody.data_loaders import create_multiantibody_dataloader\n",
    "#from maps.multiantibody.models import MultiAntibodyClassifier\n",
    "#from maps.multiantibody.training import train\n",
    "from maps.multiantibody.config import TrainConfig, ModelConfig, DataLoaderConfig\n",
    "\n",
    "import json\n",
    "from sklearn.metrics import roc_auc_score\n",
    "\n",
    "# --- Initialize parameters ---\n",
    "pdir = \"/home/kkumbier/als/scripts/maps/template_analyses/params/\"\n",
    "with open(pdir + \"maps_multiantibody.json\", \"r\") as f:\n",
    "    params = json.load(f)\n",
    "    \n",
    "\n",
    "dataloader_config = DataLoaderConfig()\n",
    "train_config = TrainConfig()\n",
    "model_config = ModelConfig()\n",
    "model_config.n_classes = 2\n",
    "\n",
    "print(json.dumps(params, indent=4))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "id": "9922e4f1",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/kkumbier/maps/maps/processing.py:183: FutureWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
      "/home/kkumbier/maps/maps/processing.py:183: FutureWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n"
     ]
    }
   ],
   "source": [
    "# Create and load screen\n",
    "screen = ImageScreenMultiAntibody(params)\n",
    "screen.load(antibody=[\"FUS/EEA1\", \"COX IV/Galectin3/atubulin\"])\n",
    "screen.preprocess()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "id": "4c42c307",
   "metadata": {},
   "outputs": [],
   "source": [
    "from maps.multiantibody.data_loaders import create_multiantibody_dataloader\n",
    "dataloader_config.batch_size = 30\n",
    "dataloader = create_multiantibody_dataloader(\n",
    "    screen,\n",
    "    **vars(dataloader_config)\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "id": "69df8c63",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "\n",
    "class AntibodyEncoder(nn.Module):\n",
    "    def __init__(self, in_features, d_model, n_layers):\n",
    "        super().__init__()\n",
    "        self.batch_norm = nn.BatchNorm1d(in_features)\n",
    "        layers = []\n",
    "        for _ in range(n_layers):\n",
    "            linear = nn.Linear(\n",
    "                in_features if len(layers)==0 else d_model, d_model\n",
    "            )\n",
    "\n",
    "            layers.append(linear)\n",
    "            layers.append(nn.ReLU())\n",
    "        self.encoder = nn.Sequential(*layers)\n",
    "\n",
    "    def forward(self, x):\n",
    "        # x: (batch, cells, features)\n",
    "        shape = x.shape\n",
    "        x = x.view(-1, x.shape[-1])  # (batch*cells, features)\n",
    "        x = self.batch_norm(x)\n",
    "        x = x.view(shape)\n",
    "        x = self.encoder(x)\n",
    "        return x  # (batch, cells, d_model)\n",
    "\n",
    "\n",
    "class CellPoolingLayer(nn.Module):\n",
    "    def __init__(self, strategy='mean'):\n",
    "        super().__init__()\n",
    "        self.strategy = strategy\n",
    "\n",
    "    def forward(self, x):\n",
    "        # x: (batch, cells, d_model)\n",
    "        if self.strategy == 'mean':\n",
    "            return x.mean(dim=1)  # (batch, d_model)\n",
    "        else:\n",
    "            raise NotImplementedError(f\"{self.strategy} not implemented.\")\n",
    "\n",
    "class AntibodyAggregationLayer(nn.Module):\n",
    "    def __init__(self, strategy='concat'):\n",
    "        super().__init__()\n",
    "        self.strategy = strategy\n",
    "\n",
    "    def forward(self, x_dict):\n",
    "        # x_dict: {antibody: (batch, d_model)}\n",
    "        if self.strategy == 'concat':\n",
    "            x_list = [x_dict[k] for k in sorted(x_dict.keys())]\n",
    "            return torch.cat(x_list, dim=1)  # (batch, d_model * n_antibodies)\n",
    "        else:\n",
    "            raise NotImplementedError(f\"{self.strategy} not implemented.\")\n",
    "\n",
    "class ClassifierHead(nn.Module):\n",
    "    def __init__(self, in_features, n_classes):\n",
    "        super().__init__()\n",
    "        self.fc = nn.Linear(in_features, n_classes)\n",
    "        self.batch_norm = nn.BatchNorm1d(in_features)\n",
    "\n",
    "    def forward(self, x):\n",
    "        # x: (batch, d_model * n_antibodies)\n",
    "        if len(x.shape) == 3: \n",
    "            shape = x.shape\n",
    "            x = x.view(-1, x.shape[-1])\n",
    "            x = self.batch_norm(x)\n",
    "            x = x.view(shape)\n",
    "        else:\n",
    "            x = self.batch_norm(x)\n",
    "\n",
    "        logits = self.fc(x)  # (batch, n_classes)\n",
    "        return logits\n",
    "\n",
    "class MultiModalClassifier(nn.Module):\n",
    "    def __init__(self, antibody_feature_dims, d_model, n_layers, n_classes):\n",
    "        super().__init__()\n",
    "        # antibody_feature_dims: dict {antibody: in_features}\n",
    "        self.antibodies = sorted(antibody_feature_dims.keys())\n",
    "        n_antibodies = len(self.antibodies)\n",
    "        \n",
    "        self.encoders = nn.ModuleDict({\n",
    "            ab: AntibodyEncoder(antibody_feature_dims[ab], d_model, n_layers)\n",
    "            for ab in self.antibodies\n",
    "        })\n",
    "        \n",
    "        self.cell_heads = nn.ModuleDict({\n",
    "            ab: ClassifierHead(d_model, n_classes)\n",
    "            for ab in self.antibodies\n",
    "        })\n",
    "        \n",
    "        self.pooling = CellPoolingLayer()\n",
    "        self.aggregation = AntibodyAggregationLayer()\n",
    "        self.line_head = ClassifierHead(d_model * n_antibodies, n_classes)\n",
    "\n",
    "    def forward(self, x_dict):\n",
    "        # x_dict: {antibody: (batch, cells, features)}\n",
    "        cell_logits = {}\n",
    "        pooled_emb = {}\n",
    "        \n",
    "        for ab in self.antibodies:\n",
    "            x = x_dict[ab]\n",
    "            emb = self.encoders[ab](x)  # (batch, cells, d_model)\n",
    "            cell_logits[ab] = self.cell_heads[ab](emb)  \n",
    "            pooled_emb[ab] = self.pooling(emb)  # (batch, d_model)\n",
    "        \n",
    "        agg = self.aggregation(pooled_emb)  # (batch, d_model * n_antibodies)\n",
    "        line_logits = self.line_head(agg)  # (batch, n_line_classes)\n",
    "        return cell_logits, line_logits\n",
    "    \n",
    "\n",
    "class LogisticClassifier(nn.Module):\n",
    "    def __init__(self, antibody_feature_dims, d_model, n_layers, n_classes):\n",
    "        super().__init__()\n",
    "        # antibody_feature_dims: dict {antibody: in_features}\n",
    "        self.antibodies = sorted(antibody_feature_dims.keys)\n",
    "        self.cell_heads = nn.ModuleDict({\n",
    "            ab: ClassifierHead(antibody_feature_dims[ab], n_classes)\n",
    "            for ab in self.antibodies\n",
    "        })\n",
    "\n",
    "    def forward(self, x_dict):\n",
    "        # x_dict: {antibody: (batch, cells, features)}\n",
    "        cell_logits = {}\n",
    "        for ab in self.antibodies:\n",
    "            cell_logits[ab] = self.cell_heads[ab](x_dict[ab])\n",
    "        return cell_logits\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "id": "5783fb3c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import DataLoader\n",
    "from maps.multiantibody.config import TrainConfig\n",
    "import wandb\n",
    "\n",
    "def train(\n",
    "    model: nn.Module, \n",
    "    dataloader: DataLoader, \n",
    "    config: TrainConfig = TrainConfig()):\n",
    "    \n",
    "    \"\"\" Configurable Adam training loop for a multi-antibody model.\"\"\"\n",
    "    \n",
    "    # --- device setup ---\n",
    "    device = config.device\n",
    "    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "    model.to(device)\n",
    "\n",
    "    # --- Training setup ---\n",
    "    optimizer = optim.Adam(\n",
    "        model.parameters(), \n",
    "        lr=config.lr, \n",
    "        betas=config.betas, \n",
    "        weight_decay=config.weight_decay\n",
    "    )\n",
    "\n",
    "    scheduler = optim.lr_scheduler.StepLR(\n",
    "        optimizer, \n",
    "        step_size=config.step_size, \n",
    "        gamma=config.gamma\n",
    "    )\n",
    "\n",
    "    criterion_cell = nn.CrossEntropyLoss()\n",
    "    criterion_line = nn.CrossEntropyLoss()\n",
    "    model.train()\n",
    "\n",
    "    # --- Early stopping setup ---\n",
    "    best_loss = float('inf')\n",
    "    epochs_no_improve = 0\n",
    "    patience = getattr(config, 'patience', 5)\n",
    "\n",
    "    # --- Training loop ---\n",
    "    for epoch in range(config.n_epochs):\n",
    "        loss_cell = 0\n",
    "        loss_line = 0\n",
    "\n",
    "        for _, batch in enumerate(dataloader):\n",
    "            if batch is None:\n",
    "                continue\n",
    "\n",
    "            optimizer.zero_grad()\n",
    "            x_dict = {ab: batch[ab][0].to(device) for ab in batch}\n",
    "            y_cell_dict = {ab: batch[ab][1].to(device) for ab in batch}\n",
    "            cell_logits, line_logits = model(x_dict)\n",
    "\n",
    "            # Compute single cell-level loss for each antibody\n",
    "            for ab in cell_logits:\n",
    "                logits = cell_logits[ab]\n",
    "                y_cell = y_cell_dict[ab]\n",
    "                y_cell_expanded = y_cell.unsqueeze(1).expand(\n",
    "                    -1, logits.shape[1]).reshape(-1)\n",
    "                \n",
    "                logits_flat = logits.reshape(-1, logits.shape[-1])\n",
    "                loss_cell += criterion_cell(logits_flat, y_cell_expanded)\n",
    "                \n",
    "            loss_cell = loss_cell / (len(cell_logits) * len(dataloader))\n",
    "            \n",
    "            # Cell line loss computed over all antibodies\n",
    "            y_line = y_cell_dict[list(batch.keys())[0]]\n",
    "            loss_line += criterion_line(line_logits, y_line)\n",
    "            loss_line = loss_line / len(dataloader)\n",
    "\n",
    "        # Total loss - accumulated over all cell lines\n",
    "        loss = loss_cell + loss_line\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "        scheduler.step()\n",
    "        \n",
    "        # Log training loss\n",
    "        if config.verbose:\n",
    "            print(f\"Epoch {epoch+1}/{config.n_epochs}, Loss: {loss.item()}\")\n",
    "        if config.log and wandb.run is not None:\n",
    "            wandb.log({\n",
    "                \"loss_line\": loss_line.item(),\n",
    "                \"loss_cell\": loss_cell.item()\n",
    "            })\n",
    "\n",
    "        # Early stopping check\n",
    "        if loss.item() < best_loss - 1e-6:  # min_delta=1e-6\n",
    "            best_loss = loss.item()\n",
    "            epochs_no_improve = 0\n",
    "        else:\n",
    "            epochs_no_improve += 1\n",
    "\n",
    "        if epochs_no_improve >= patience:\n",
    "            if config.verbose:\n",
    "                print(f\"Early stopping at epoch {epoch+1}. Best loss: {best_loss}\")\n",
    "            break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "id": "dd67b3f8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20, Loss: 1.416534185409546\n",
      "Epoch 2/20, Loss: 1.2891056537628174\n",
      "Epoch 3/20, Loss: 1.2170754671096802\n",
      "Epoch 4/20, Loss: 1.1891754865646362\n",
      "Epoch 5/20, Loss: 1.0705616474151611\n",
      "Epoch 6/20, Loss: 1.060548186302185\n",
      "Epoch 7/20, Loss: 0.9856206178665161\n",
      "Epoch 8/20, Loss: 1.0181787014007568\n",
      "Epoch 9/20, Loss: 0.9505705833435059\n",
      "Epoch 10/20, Loss: 0.9585700631141663\n",
      "Epoch 11/20, Loss: 0.933003306388855\n",
      "Epoch 12/20, Loss: 0.8840017318725586\n",
      "Epoch 13/20, Loss: 0.9066146612167358\n",
      "Epoch 14/20, Loss: 0.8866533041000366\n",
      "Epoch 15/20, Loss: 0.8826792240142822\n",
      "Epoch 16/20, Loss: 0.8694403767585754\n",
      "Epoch 17/20, Loss: 0.9046570062637329\n",
      "Epoch 18/20, Loss: 0.9509486556053162\n",
      "Epoch 19/20, Loss: 0.8771358132362366\n",
      "Epoch 20/20, Loss: 0.8686089515686035\n"
     ]
    }
   ],
   "source": [
    "# Initiaize model and train\n",
    "train_config.n_epochs = 20\n",
    "train_config.patience = 10\n",
    "dataloader.mode = \"train\"\n",
    "model_config.antibody_feature_dims = dataloader._get_feature_dims()\n",
    "model = MultiModalClassifier(**vars(model_config))\n",
    "train(model, dataloader, train_config)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "id": "e71979c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.eval()\n",
    "all_probs = []\n",
    "all_labels = []\n",
    "all_lines = []\n",
    "dataloader.mode = \"eval\"  # Set dataloader to evaluation mode\n",
    "device = next(model.parameters()).device  # Get device from model parameters\n",
    "\n",
    "with torch.no_grad():\n",
    "    for batch in dataloader:\n",
    "        if batch is None:\n",
    "            continue\n",
    "        \n",
    "        x_dict = {ab: batch[ab][0].to(device) for ab in batch}\n",
    "        y_line = batch[list(batch.keys())[0]][1].to(device)\n",
    "        cl = [batch[list(batch.keys())[0]][-1]]\n",
    "        _, line_logits = model(x_dict)\n",
    "        probs = torch.softmax(line_logits, dim=-1)\n",
    "        all_probs.append(probs.cpu())\n",
    "        all_labels.append(y_line.cpu())\n",
    "        all_lines.extend(cl)\n",
    "\n",
    "all_probs = torch.cat(all_probs, dim=0)\n",
    "all_labels = torch.cat(all_labels, dim=0)\n",
    "\n",
    "preds = pd.DataFrame(all_probs.numpy())\n",
    "preds.columns = [f\"Class_{i}\" for i in range(model_config.n_classes)]   \n",
    "preds[\"CellLines\"] = all_lines\n",
    "preds[\"True\"] = all_labels.numpy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "id": "7c7e4fb8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": ""
     },
     "metadata": {
      "image/png": {
       "height": 480,
       "width": 640
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from plotnine import ggplot, aes, geom_bar, theme, element_text, labs\n",
    "\n",
    "# Sort preds by predicted probability (Class_1) in ascending order\n",
    "preds = preds.sort_values(by='Class_1', ascending=True)\n",
    "preds['CellLines'] = pd.Categorical(preds['CellLines'], categories=preds['CellLines'], ordered=True)\n",
    "\n",
    "# Convert True column to string for coloring\n",
    "preds['True_str'] = preds['True'].astype(str)\n",
    "\n",
    "# Create barplot\n",
    "(\n",
    "    ggplot(preds, aes(x='CellLines', y='Class_1', fill='True_str')) +\n",
    "    geom_bar(stat='identity') +\n",
    "    theme(axis_text_x=element_text(rotation=90, hjust=1)) +\n",
    "    labs(x='Cell Line', y='Predicted Probability (Class 1)', fill='True Label')\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "id": "0c2e8fb3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([64])\n",
      "Group1: 0.9983021020889282\n",
      "Group2: 1.0016978979110718\n"
     ]
    }
   ],
   "source": [
    "line_head = model.line_head\n",
    "feature_weight = line_head.fc.weight.abs().softmax(dim=-1)\n",
    "feature_weight = feature_weight.sum(dim=0)\n",
    "print(feature_weight.shape)\n",
    "print(f\"Group1: {feature_weight[:32].sum()}\")\n",
    "print(f\"Group2: {feature_weight[32:].sum()}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "maps",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
